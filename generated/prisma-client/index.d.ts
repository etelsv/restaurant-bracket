// Code generated by Prisma (prisma@1.20.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  cuisine: (where?: CuisineWhereInput) => Promise<boolean>;
  restaurant: (where?: RestaurantWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cuisine: (where: CuisineWhereUniqueInput) => CuisinePromise;
  cuisines: (
    args?: {
      where?: CuisineWhereInput;
      orderBy?: CuisineOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Cuisine>;
  cuisinesConnection: (
    args?: {
      where?: CuisineWhereInput;
      orderBy?: CuisineOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CuisineConnectionPromise;
  restaurant: (where: RestaurantWhereUniqueInput) => RestaurantPromise;
  restaurants: (
    args?: {
      where?: RestaurantWhereInput;
      orderBy?: RestaurantOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Restaurant>;
  restaurantsConnection: (
    args?: {
      where?: RestaurantWhereInput;
      orderBy?: RestaurantOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RestaurantConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VotePromise;
  votes: (
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Vote>;
  votesConnection: (
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCuisine: (data: CuisineCreateInput) => CuisinePromise;
  updateCuisine: (
    args: { data: CuisineUpdateInput; where: CuisineWhereUniqueInput }
  ) => CuisinePromise;
  updateManyCuisines: (
    args: { data: CuisineUpdateManyMutationInput; where?: CuisineWhereInput }
  ) => BatchPayloadPromise;
  upsertCuisine: (
    args: {
      where: CuisineWhereUniqueInput;
      create: CuisineCreateInput;
      update: CuisineUpdateInput;
    }
  ) => CuisinePromise;
  deleteCuisine: (where: CuisineWhereUniqueInput) => CuisinePromise;
  deleteManyCuisines: (where?: CuisineWhereInput) => BatchPayloadPromise;
  createRestaurant: (data: RestaurantCreateInput) => RestaurantPromise;
  updateRestaurant: (
    args: { data: RestaurantUpdateInput; where: RestaurantWhereUniqueInput }
  ) => RestaurantPromise;
  updateManyRestaurants: (
    args: {
      data: RestaurantUpdateManyMutationInput;
      where?: RestaurantWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertRestaurant: (
    args: {
      where: RestaurantWhereUniqueInput;
      create: RestaurantCreateInput;
      update: RestaurantUpdateInput;
    }
  ) => RestaurantPromise;
  deleteRestaurant: (where: RestaurantWhereUniqueInput) => RestaurantPromise;
  deleteManyRestaurants: (where?: RestaurantWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (
    args: { data: VoteUpdateInput; where: VoteWhereUniqueInput }
  ) => VotePromise;
  updateManyVotes: (
    args: { data: VoteUpdateManyMutationInput; where?: VoteWhereInput }
  ) => BatchPayloadPromise;
  upsertVote: (
    args: {
      where: VoteWhereUniqueInput;
      create: VoteCreateInput;
      update: VoteUpdateInput;
    }
  ) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cuisine: (
    where?: CuisineSubscriptionWhereInput
  ) => CuisineSubscriptionPayloadSubscription;
  restaurant: (
    where?: RestaurantSubscriptionWhereInput
  ) => RestaurantSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CuisineOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "voter_ASC"
  | "voter_DESC"
  | "token_ASC"
  | "token_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RestaurantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "bracketLocation_ASC"
  | "bracketLocation_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface VoteCreateInput {
  voter: String;
  token: String;
  restaurant: RestaurantCreateOneWithoutVotesInput;
}

export interface CuisineUpdateOneRequiredInput {
  create?: CuisineCreateInput;
  update?: CuisineUpdateDataInput;
  upsert?: CuisineUpsertNestedInput;
  connect?: CuisineWhereUniqueInput;
}

export type VoteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type CuisineWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface VoteUpdateWithoutRestaurantDataInput {
  voter?: String;
  token?: String;
}

export interface CuisineSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CuisineWhereInput;
  AND?: CuisineSubscriptionWhereInput[] | CuisineSubscriptionWhereInput;
  OR?: CuisineSubscriptionWhereInput[] | CuisineSubscriptionWhereInput;
  NOT?: CuisineSubscriptionWhereInput[] | CuisineSubscriptionWhereInput;
}

export interface VoteUpdateWithWhereUniqueWithoutRestaurantInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutRestaurantDataInput;
}

export interface RestaurantUpsertWithoutVotesInput {
  update: RestaurantUpdateWithoutVotesDataInput;
  create: RestaurantCreateWithoutVotesInput;
}

export interface VoteUpdateManyWithoutRestaurantInput {
  create?:
    | VoteCreateWithoutRestaurantInput[]
    | VoteCreateWithoutRestaurantInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  update?:
    | VoteUpdateWithWhereUniqueWithoutRestaurantInput[]
    | VoteUpdateWithWhereUniqueWithoutRestaurantInput;
  upsert?:
    | VoteUpsertWithWhereUniqueWithoutRestaurantInput[]
    | VoteUpsertWithWhereUniqueWithoutRestaurantInput;
}

export interface RestaurantUpdateOneRequiredWithoutVotesInput {
  create?: RestaurantCreateWithoutVotesInput;
  update?: RestaurantUpdateWithoutVotesDataInput;
  upsert?: RestaurantUpsertWithoutVotesInput;
  connect?: RestaurantWhereUniqueInput;
}

export interface VoteUpdateInput {
  voter?: String;
  token?: String;
  restaurant?: RestaurantUpdateOneRequiredWithoutVotesInput;
}

export interface RestaurantCreateWithoutVotesInput {
  name: String;
  cuisine: CuisineCreateOneInput;
  bracketLocation: Int;
}

export interface CuisineCreateInput {
  name: String;
}

export interface CuisineWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CuisineWhereInput[] | CuisineWhereInput;
  OR?: CuisineWhereInput[] | CuisineWhereInput;
  NOT?: CuisineWhereInput[] | CuisineWhereInput;
}

export interface CuisineUpdateInput {
  name?: String;
}

export interface RestaurantSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RestaurantWhereInput;
  AND?: RestaurantSubscriptionWhereInput[] | RestaurantSubscriptionWhereInput;
  OR?: RestaurantSubscriptionWhereInput[] | RestaurantSubscriptionWhereInput;
  NOT?: RestaurantSubscriptionWhereInput[] | RestaurantSubscriptionWhereInput;
}

export interface CuisineUpdateManyMutationInput {
  name?: String;
}

export interface RestaurantUpdateManyMutationInput {
  name?: String;
  bracketLocation?: Int;
}

export interface CuisineUpsertNestedInput {
  update: CuisineUpdateDataInput;
  create: CuisineCreateInput;
}

export interface VoteUpdateManyMutationInput {
  voter?: String;
  token?: String;
}

export interface CuisineUpdateDataInput {
  name?: String;
}

export type RestaurantWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface RestaurantCreateInput {
  name: String;
  cuisine: CuisineCreateOneInput;
  votes?: VoteCreateManyWithoutRestaurantInput;
  bracketLocation: Int;
}

export interface RestaurantWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  cuisine?: CuisineWhereInput;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  bracketLocation?: Int;
  bracketLocation_not?: Int;
  bracketLocation_in?: Int[] | Int;
  bracketLocation_not_in?: Int[] | Int;
  bracketLocation_lt?: Int;
  bracketLocation_lte?: Int;
  bracketLocation_gt?: Int;
  bracketLocation_gte?: Int;
  AND?: RestaurantWhereInput[] | RestaurantWhereInput;
  OR?: RestaurantWhereInput[] | RestaurantWhereInput;
  NOT?: RestaurantWhereInput[] | RestaurantWhereInput;
}

export interface RestaurantUpdateInput {
  name?: String;
  cuisine?: CuisineUpdateOneRequiredInput;
  votes?: VoteUpdateManyWithoutRestaurantInput;
  bracketLocation?: Int;
}

export interface VoteCreateWithoutRestaurantInput {
  voter: String;
  token: String;
}

export interface VoteCreateManyWithoutRestaurantInput {
  create?:
    | VoteCreateWithoutRestaurantInput[]
    | VoteCreateWithoutRestaurantInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface CuisineCreateOneInput {
  create?: CuisineCreateInput;
  connect?: CuisineWhereUniqueInput;
}

export interface RestaurantCreateOneWithoutVotesInput {
  create?: RestaurantCreateWithoutVotesInput;
  connect?: RestaurantWhereUniqueInput;
}

export interface VoteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  voter?: String;
  voter_not?: String;
  voter_in?: String[] | String;
  voter_not_in?: String[] | String;
  voter_lt?: String;
  voter_lte?: String;
  voter_gt?: String;
  voter_gte?: String;
  voter_contains?: String;
  voter_not_contains?: String;
  voter_starts_with?: String;
  voter_not_starts_with?: String;
  voter_ends_with?: String;
  voter_not_ends_with?: String;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  restaurant?: RestaurantWhereInput;
  AND?: VoteWhereInput[] | VoteWhereInput;
  OR?: VoteWhereInput[] | VoteWhereInput;
  NOT?: VoteWhereInput[] | VoteWhereInput;
}

export interface RestaurantUpdateWithoutVotesDataInput {
  name?: String;
  cuisine?: CuisineUpdateOneRequiredInput;
  bracketLocation?: Int;
}

export interface VoteUpsertWithWhereUniqueWithoutRestaurantInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutRestaurantDataInput;
  create: VoteCreateWithoutRestaurantInput;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VoteWhereInput;
  AND?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  OR?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  NOT?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VotePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  voter: String;
  token: String;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  voter: () => Promise<String>;
  token: () => Promise<String>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  voter: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
}

export interface Restaurant {
  id: ID_Output;
  name: String;
  bracketLocation: Int;
}

export interface RestaurantPromise extends Promise<Restaurant>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  cuisine: <T = Cuisine>() => T;
  votes: <T = FragmentableArray<Vote>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  bracketLocation: () => Promise<Int>;
}

export interface RestaurantSubscription
  extends Promise<AsyncIterator<Restaurant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  cuisine: <T = CuisineSubscription>() => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  bracketLocation: () => Promise<AsyncIterator<Int>>;
}

export interface RestaurantSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface RestaurantSubscriptionPayloadPromise
  extends Promise<RestaurantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Restaurant>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RestaurantPreviousValues>() => T;
}

export interface RestaurantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RestaurantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RestaurantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RestaurantPreviousValuesSubscription>() => T;
}

export interface AggregateCuisine {
  count: Int;
}

export interface AggregateCuisinePromise
  extends Promise<AggregateCuisine>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCuisineSubscription
  extends Promise<AsyncIterator<AggregateCuisine>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CuisineEdge {
  cursor: String;
}

export interface CuisineEdgePromise extends Promise<CuisineEdge>, Fragmentable {
  node: <T = Cuisine>() => T;
  cursor: () => Promise<String>;
}

export interface CuisineEdgeSubscription
  extends Promise<AsyncIterator<CuisineEdge>>,
    Fragmentable {
  node: <T = CuisineSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface VoteEdge {
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = Vote>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Cuisine {
  id: ID_Output;
  name: String;
}

export interface CuisinePromise extends Promise<Cuisine>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CuisineSubscription
  extends Promise<AsyncIterator<Cuisine>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRestaurant {
  count: Int;
}

export interface AggregateRestaurantPromise
  extends Promise<AggregateRestaurant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRestaurantSubscription
  extends Promise<AsyncIterator<AggregateRestaurant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface RestaurantConnection {}

export interface RestaurantConnectionPromise
  extends Promise<RestaurantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<RestaurantEdge>>() => T;
  aggregate: <T = AggregateRestaurant>() => T;
}

export interface RestaurantConnectionSubscription
  extends Promise<AsyncIterator<RestaurantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RestaurantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRestaurantSubscription>() => T;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Vote>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValues>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface CuisinePreviousValues {
  id: ID_Output;
  name: String;
}

export interface CuisinePreviousValuesPromise
  extends Promise<CuisinePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CuisinePreviousValuesSubscription
  extends Promise<AsyncIterator<CuisinePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CuisineSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CuisineSubscriptionPayloadPromise
  extends Promise<CuisineSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Cuisine>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CuisinePreviousValues>() => T;
}

export interface CuisineSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CuisineSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CuisineSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CuisinePreviousValuesSubscription>() => T;
}

export interface RestaurantPreviousValues {
  id: ID_Output;
  name: String;
  bracketLocation: Int;
}

export interface RestaurantPreviousValuesPromise
  extends Promise<RestaurantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  bracketLocation: () => Promise<Int>;
}

export interface RestaurantPreviousValuesSubscription
  extends Promise<AsyncIterator<RestaurantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  bracketLocation: () => Promise<AsyncIterator<Int>>;
}

export interface CuisineConnection {}

export interface CuisineConnectionPromise
  extends Promise<CuisineConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<CuisineEdge>>() => T;
  aggregate: <T = AggregateCuisine>() => T;
}

export interface CuisineConnectionSubscription
  extends Promise<AsyncIterator<CuisineConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CuisineEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCuisineSubscription>() => T;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Vote {
  id: ID_Output;
  createdAt: DateTimeOutput;
  voter: String;
  token: String;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  voter: () => Promise<String>;
  token: () => Promise<String>;
  restaurant: <T = Restaurant>() => T;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  voter: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  restaurant: <T = RestaurantSubscription>() => T;
}

export interface RestaurantEdge {
  cursor: String;
}

export interface RestaurantEdgePromise
  extends Promise<RestaurantEdge>,
    Fragmentable {
  node: <T = Restaurant>() => T;
  cursor: () => Promise<String>;
}

export interface RestaurantEdgeSubscription
  extends Promise<AsyncIterator<RestaurantEdge>>,
    Fragmentable {
  node: <T = RestaurantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface VoteConnection {}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVote>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
